// Eloquas Outreach Engine — Unified Code File (v2)
// Includes: TrustBuilder + StoryBuilder toggle logic, PDL integration, dynamic messaging

import OpenAI from "openai";
import axios from "axios";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const PDL_API_KEY = process.env.PDL_API_KEY;

interface PersonalizationData {
  firstName: string;
  lastName: string;
  company: string;
  role: string;
  industry: string;
  painPoints: string[];
  recentAchievement?: string;
  sharedConnection?: string;
  mutualInterest?: string;
  eventName?: string;
  eventDate?: string;
  keyInsights?: string[];
}

export class EloquasOutreachEngine {
  async enrichFromPDL(email: string): Promise<PersonalizationData> {
    const personRes = await axios.post("https://api.peopledatalabs.com/v5/person/enrich", {
      email
    }, {
      headers: {
        'Content-Type': 'application/json',
        'X-Api-Key': PDL_API_KEY
      }
    });

    const person = personRes.data;
    const companyName = person.experience?.[0]?.company?.name || person.company_name;
    const companyRes = await axios.post("https://api.peopledatalabs.com/v5/company/enrich", {
      name: companyName
    }, {
      headers: {
        'Content-Type': 'application/json',
        'X-Api-Key': PDL_API_KEY
      }
    });

    const company = companyRes.data;

    return {
      firstName: person.first_name,
      lastName: person.last_name,
      company: company.name || companyName,
      role: person.job_title || 'Unknown',
      industry: company.industry || 'Unknown',
      painPoints: [],
      recentAchievement: person.summary,
      mutualInterest: person.skills?.[0],
      sharedConnection: person.linkedin_connections?.[0]?.name || '',
    };
  }

  async generateMessage(templateType: string, data: PersonalizationData, opts: {
    trustBuilder: boolean,
    storyBuilder: boolean
  }): Promise<string> {

    const trustPrompt = opts.trustBuilder ? "- Use trust-building language focused on credibility, ROI, and QA automation confidence." : "";
    const storyPrompt = opts.storyBuilder ? "- Use relatable customer scenarios or challenges to introduce the message." : "";

    const prompt = `You are Eloquas AI, a B2B outreach engine for QA and enterprise system automation. Generate a message for a ${templateType.replace(/_/g, ' ')} campaign.

${trustPrompt}
${storyPrompt}

DETAILS:
- Name: ${data.firstName} ${data.lastName}
- Company: ${data.company}
- Role: ${data.role}
- Industry: ${data.industry}
- Pain Points: ${data.painPoints.join(', ') || 'N/A'}
- Recent Achievement: ${data.recentAchievement || 'N/A'}
- Shared Connection: ${data.sharedConnection || 'N/A'}
- Mutual Interest: ${data.mutualInterest || 'N/A'}

Guidelines:
- Subject line followed by body
- Body must be 40–80 words max
- Clear CTA or insight
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "You are Eloquas AI, expert in outreach messaging that builds trust and uses short-form storytelling." },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 300
    });

    return response.choices?.[0]?.message?.content || 'No message generated.';
  }
}

export const eloquasOutreachEngine = new EloquasOutreachEngine();